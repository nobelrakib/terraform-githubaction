name: "terraform-iac"
on:
  push:
    branches:
      - main
      - stage
    
  pull_request:
    branches:
      - main
    
  # Add workflow dispatch for manual triggering
  workflow_dispatch:
    inputs:
      replace_instances:
        description: 'Replace EC2 instances (comma-separated resource names)'
        required: false
        default: 'module.ec2.aws_instance.public,module.ec2.aws_instance.private[0]'
      force_replace:
        description: 'Force replace all EC2 instances'
        required: false
        default: false
        type: boolean

env:
 AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
 AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
 BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE}}
 AWS_REGION: us-east-1
 

jobs:
   terraform:
     name: "Apply terraform code changes"
     runs-on: ubuntu-latest
     defaults:
       run:
         shell: bash

     steps:
       - name: Checkout source code 
         uses: actions/checkout@v4

       - name: Setup Terraform with specified version on the runner
         uses: hashicorp/setup-terraform@v2
         #with:
         #  terraform_version: 1.6.3

       - name: Terraform init
         id: init
         run: terraform init -backend-config="bucket=$BUCKET_TF_STATE"

      

       - name: Terraform validate
         id: validate
         run: terraform validate

       - name: Terraform plan
         id: plan
         run: terraform plan -no-color -input=false -out planfile
         continue-on-error: true

       - name: Terraform plan status
         if: steps.plan.outcome == 'failure' 
         run: exit 1     

       - name: Terraform Apply
         id: apple
         if: github.ref == 'refs/heads/main' && github.event_name == 'push'
         run: terraform apply -auto-approve -input=false -parallelism=1 planfile

   # New job for replacing EC2 instances
   replace-ec2:
     name: "Replace EC2 Instances"
     runs-on: ubuntu-latest
     needs: terraform
     if: github.event_name == 'workflow_dispatch'
     defaults:
       run:
         shell: bash

     steps:
       - name: Checkout source code 
         uses: actions/checkout@v4

       - name: Setup Terraform with specified version on the runner
         uses: hashicorp/setup-terraform@v2

       - name: Terraform init
         run: terraform init -backend-config="bucket=$BUCKET_TF_STATE"

       - name: Replace specific EC2 instances
         if: github.event.inputs.replace_instances != ''
         run: |
           IFS=',' read -ra INSTANCES <<< "${{ github.event.inputs.replace_instances }}"
           for instance in "${INSTANCES[@]}"; do
             echo "Replacing instance: $instance"
             terraform apply -auto-approve -replace="$instance"
           done

       - name: Force replace all EC2 instances
         if: github.event.inputs.force_replace == 'true'
         run: |
           echo "Force replacing all EC2 instances..."
           terraform apply -auto-approve -replace="module.ec2.aws_instance.public" -replace="module.ec2.aws_instance.private[0]" -replace="module.ec2.aws_instance.private[1]" -replace="module.ec2.aws_instance.database" 